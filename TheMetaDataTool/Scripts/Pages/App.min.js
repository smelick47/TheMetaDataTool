(function (e, t, n) { e.Options = { Export: { TermProperties: false, TermLables: false } }; e.getObjectData = function () { return { tm: new mapers.Template, cc: 0, rc: 0, fc: 0, lg: "", Options: e.Options, log: function (e) { this.lg += ";" + e } } }; e.mapGroupObject = function (e) { var t = new mapers.G; t.d = e.get_description(); t.i = e.get_id().toString(); t.x = e.get_name(); return t }; e.mapTermSetObject = function (e) { var t = new mapers.S; t.d = e.get_description(); t.i = e.get_id().toString(); t.x = e.get_name(); return t }; e.mapTermObject = function (e) { var t = new mapers.T; t.d = e.get_description(); t.i = e.get_id().toString(); t.x = e.get_name(); return t }; e.mapLabelObject = function (e) { var t = new mapers.OL; t.c = e.get_language(); t.v = e.get_value(); t.d = e.get_isDefaultForLanguage(); return t }; e.exportGetTermsForTermSet = function (t, n, r) { var i = new spa.Metadata; var s = t.i; var o = n.i; r.cc++; i.getTermsAsync(r.tm.Data.i, s, o).done(function (i) { r.rc++; var s = i.getEnumerator(); while (s.moveNext()) { var o = s.get_current(); var u = e.mapTermObject(o); n.t.push(u); e.exportTermData(n.t[n.t.length - 1], n, t, r); if (o.get_termsCount() > 0) { e.exportGetChildTerms(n.t[n.t.length - 1], t, n, r) } } }).fail(function (e) { r.fc++; r.log(" Term faild." + e) }) }; e.exportGetTermSetsandTerms = function (n) { var r = new spa.Metadata; t.each(n.tm.Data.g, function (t, i) { n.cc++; r.getallTermSetsbyGroupAsync(n.tm.Data.i, i.i).done(function (r) { n.rc++; var i = r.getEnumerator(); while (i.moveNext()) { var s = i.get_current(); var o = e.mapTermSetObject(s); n.tm.Data.g[t].s.push(o); e.exportGetTermsForTermSet(n.tm.Data.g[t], n.tm.Data.g[t].s[n.tm.Data.g[t].s.length - 1], n) } }).fail(function (e) { n.fc++; n.log(" Term Sets faild." + e) }) }) }; e.exportGetChildTerms = function (t, n, r, i) { var s = n.i; var o = r.i; var u = new spa.Metadata; i.cc++; u.getChildTermsAsync(i.tm.Data.i, s, o, t.i).done(function (s) { i.rc++; var o = s.getEnumerator(); while (o.moveNext()) { var u = o.get_current(); var a = e.mapTermObject(u); t.t.push(a); e.exportTermData(t.t[t.t.length - 1], r, n, i); if (u.get_termsCount() > 0) { e.exportGetChildTerms(t.t[t.t.length - 1], n, r, i) } } }).fail(function (e) { i.fc++; i.log(" Child Term failed " + e) }) }; e.exportTermData = function (t, n, r, i) { if (i.Options.Export.TermProperties) { e.exportTermLocalSharedProperties(t, n, r, i) } if (i.Options.Export.TermLables) { e.exportTermLables(t, n, r, i) } }; e.exportTermLocalSharedProperties = function (e, n, r, i) { var s = new spa.Metadata; i.cc++; s.getTermLocalSharedPropertiesByTermIdAsync(i.tm.Data.i, r.i, n.i, e.i).done(function (n, r) { i.rc++; t.each(n, function (t, n) { var r = new mapers.P; r.n = t; r.v = n; e.w.push(r) }); t.each(r, function (t, n) { var r = new mapers.SP; r.n = t; r.v = n; e.y.push(r) }) }).fail(function (e) { i.fc++; i.log(" Term properties failed. " + e) }) }; e.exportTermLables = function (n, r, i, s) { var o = new spa.Metadata; t.each(s.tm.l, function (t, u) { s.cc++; o.getTermByIdAsyncWithLabels(s.tm.Data.i, i.i, r.i, n.i, u).done(function (t) { s.rc++; var r = t.getEnumerator(); while (r.moveNext()) { var i = r.get_current(); if (u == s.tm.Data.dl && i.get_isDefaultForLanguage()) { } else { var o = e.mapLabelObject(i); n.z.push(o) } } }).fail(function (e) { objdata.fc++; s.log(" Term lable failed. " + n.x + ":" + e) }) }) } })(window.ei = window.ei || {}, jQuery); (function (e, t, n) { function r(e, t) { var n = new spa.Operations; n.getListItemByIdAsync(defs.L.Configs.Nm, 1).done(function (r) { if (r.get_item("ConfigItem") == 0) { var i = spa.web.ensureUser("c:0(.s|true"); var s = SP.RoleDefinitionBindingCollection.newObject(spa.ctx); s.add(spa.web.get_roleDefinitions().getByType(SP.RoleType.contributor)); var o = spa.web.get_lists().getByTitle(defs.L.Export.Nm); o.breakRoleInheritance(false, true); o.get_roleAssignments().add(i, s); var u = spa.web.get_lists().getByTitle(defs.L.LogData.Nm); u.breakRoleInheritance(false, true); u.get_roleAssignments().add(i, s); spa.executeCtxAsync().done(function () { n.updateListColumnByIdAsync(defs.L.Configs.Nm, 1, defs.L.Configs.C.ConfigItem, 1).done(function () { e() }).fail(function () { t() }) }).fail(function () { t() }) } else { e() } }).fail(function () { t() }) } function i() { } function s() { var e = new spa.Permisions; e.doesUserHaveManagewebAsync().done(function () { handeler.AddtoSuiteBar("app-Settings-ico", "Settings", handeler.getImageUrl("settings.png"), "", "handeler.goTo('pages/_app/Appsettings.aspx');") }) } function o() { return t("span#DeltaPlaceHolderPageTitleInTitleArea").attr("data-mmsid") } function u() { return t("span#DeltaPlaceHolderPageTitleInTitleArea").text() } function a() { return t("span#DeltaPlaceHolderPageTitleInTitleArea").attr("data-dl") } function f() { var e = []; t.each(JSON.parse(t("span#DeltaPlaceHolderPageTitleInTitleArea").attr("data-l")), function (t, n) { e.push(n) }); return e } function l(e) { var t = new mapers.TreeItem; t.Id = e.i; t.text = e.x; if (e[mapers.TreeItem.Attributes.isGroup]) { t.iconCls = "icon-mmgroup" } else if (e[mapers.TreeItem.Attributes.isTermSet]) { t.iconCls = "icon-mmTermSet" } else if (e[mapers.TreeItem.Attributes.isTerm]) { t.iconCls = "icon-mmTerm" } t.state = mapers.TreeItem.State.Close; return t } function c(e, t) { t.forEach(function (t) { t[mapers.TreeItem.Attributes.isTerm] = true; var n = l(t); if (t.t.length > 0) { c(n, t.t) } else { n.state = mapers.TreeItem.State.Open } e.children.push(n) }) } function h(e, n) { var r = []; n.g.forEach(function (e) { e[mapers.TreeItem.Attributes.isGroup] = true; var t = l(e); if (e.s.length > 0) { e.s.forEach(function (e) { e[mapers.TreeItem.Attributes.isTermSet] = true; var n = l(e); if (e.t.length > 0) { e.t.forEach(function (e) { e[mapers.TreeItem.Attributes.isTerm] = true; var t = l(e); if (e.t.length > 0) { c(t, e.t) } else { t.state = mapers.TreeItem.State.Open } n.children.push(t) }) } else { n.state = mapers.TreeItem.State.Open } t.children.push(n) }) } else { t.state = mapers.TreeItem.State.Open } r.push(t) }); var i = []; var s = new mapers.TreeItem; s.Id = n.i; s.text = n.n; s.state = mapers.TreeItem.State.Open; s.children = r; s.attributes = { Store: true }; i.push(s); t(e).tree({ data: i, checkbox: false }) } function p(e) { if (typeof e.length == "number") { data = { total: e.length, rows: e } } var n = t(this); var r = n.datagrid("options"); var i = n.datagrid("getPager"); i.pagination({ onSelectPage: function (e, t) { r.pageNumber = e; r.pageSize = t; i.pagination("refresh", { pageNumber: e, pageSize: t }); n.datagrid("loadData", data) } }); if (!data.originalRows) { data.originalRows = data.rows } var s = (r.pageNumber - 1) * parseInt(r.pageSize); var o = s + parseInt(r.pageSize); data.rows = data.originalRows.slice(s, o); return data } i(); e.Default = function () { function i(e) { if (e) { t("#tabs").tabs("disableTab", 1); t("#tabs").tabs("disableTab", 2); t("#tabs").tabs("disableTab", 3); t("#tabs").tabs("disableTab", 4) } else { t("#tabs").tabs("enableTab", 1); t("#tabs").tabs("enableTab", 2); t("#tabs").tabs("enableTab", 3); t("#tabs").tabs("enableTab", 4) } } function s() { t("#tabs").tabs({ border: false, tabHeight: 55, tabPosition: "top", onSelect: function (t, n) { switch (n) { case 1: break; case 2: break; case 3: e.Default.TabImportExport.loadTab(); break; case 4: e.Default.TabTemplate.loadTab(); break; default: } } }); i(true); t("a#btn-loadtem").linkbutton({ plain: true, iconCls: "icon-reload" }); t("a#btn-saveprop").linkbutton({ plain: true, iconCls: "icon-save" }); t("a#btn-export").linkbutton({ plain: true, iconCls: "icon-export" }); t("a#btn-import").linkbutton({ plain: true, iconCls: "icon-import" }); t("a#btn-refresh-tab-importexport").linkbutton({ plain: true, iconCls: "icon-reload" }); t("a#btn-lbl-add").linkbutton({ plain: true, iconCls: "icon-add" }); t("a#btn-lbl-add-cp").linkbutton({ plain: true, iconCls: "icon-add" }); t("a#btn-lbl-del").linkbutton({ plain: true, iconCls: "icon-remove" }); t("a#btn-template-refresh").linkbutton({ plain: true, iconCls: "icon-reload" }); t("a#btn-saveasatemplate").linkbutton({ plain: true, iconCls: "icon-save" }); t("a#btn-tmpl-all").linkbutton({ plain: true, toggle: true, group: "tmpltypes" }); t("a#btn-tmpl-store").linkbutton({ plain: true, toggle: true, group: "tmpltypes" }); t("a#btn-tmpl-group").linkbutton({ plain: true, toggle: true, group: "tmpltypes" }); t("a#btn-tmpl-set").linkbutton({ plain: true, toggle: true, group: "tmpltypes" }); t("a#btn-tmpl-term").linkbutton({ plain: true, toggle: true, group: "tmpltypes" }); t("#templateGrid").datagrid({ fitColumns: true, autoRowHeight: false, pagination: true, pageSize: 7, pageList: [7, 14, 21, 28], singleSelect: true, onClickRow: e.Default.TabTemplate.clickTemplateGrid }); t("#exportGrid").datagrid({ fitColumns: true, autoRowHeight: false, pagination: true, pageSize: 7, pageList: [7, 14, 21, 28], singleSelect: true, onClickRow: e.Default.TabImportExport.clickExportGrid }); t("#templateGrid").datagrid("getPager").pagination({ showRefresh: false }); t("#templateTree-context").menu(); t("#templateTree-context-root").menu(); t("#metaDataTree-context-store").menu(); t("#metaDataTree-context-group").menu(); t("#metaDataTree-context-termset").menu(); t("#metaDataTree-context-term").menu(); t("div#dlg-add-Labels").dialog({ title: "Add Synonyms & Abbreviations", width: "250", height: "auto", modal: true, closable: true, closed: true, toolbar: [{ text: "Save", iconCls: "icon-save", handler: E }] }); t("div#dlg-add-Properties").dialog({ title: "Add/Update Custom Property", width: "300", height: "auto", modal: true, closable: true, closed: true, toolbar: [{ text: "Save", iconCls: "icon-save", handler: S }] }); t("div#dlg-import-terms").dialog({ title: "Import Data", width: "400", height: "450", modal: true, closable: true, closed: true, buttons: [{ text: "Import", handler: e.Default.TabImportExport.importExportedData }] }); t("div#dlg-apply-Templates").dialog({ title: "Apply Template", width: "400", height: "200", modal: true, closable: true, closed: true, toolbar: [{ text: "Apply Template", iconCls: "icon-import", handler: e.Default.TabTemplate.applyTemplate }] }); t.messager.progress("close") } function c(e) { t("#templateGrid").datagrid({ loadFilter: p }).datagrid("loadData", e) } function d(e) { t("#exportGrid").datagrid({ loadFilter: p }).datagrid("loadData", e) } function v(e) { t(document).ready(function () { var n = '<div class="mms-item"><a href="#" onClick="app.Default.selectmmsItem(this)" id="mms-store" data-name="@data-name" data-dl="@data-dl" data-l="@data-l"  data-mmsid="@data-mmsid"><table><tr><th>Name</th><td>@Name</td></tr><tr><th>Online</th><td>@online</td></tr></table></a></div>'; n = n.replace("@data-mmsid", e.get_id()); n = n.replace("@data-name", e.get_name()); n = n.replace("@data-dl", e.get_defaultLanguage()); n = n.replace("@data-l", JSON.stringify(e.get_languages())); n = n.replace("@Name", e.get_name()); n = n.replace("@online", e.get_isOnline()); t("div#mms-items").append(n) }) } function m(e) { var t = new mapers.TreeItem; t.Id = e.get_id(); t.text = e.get_name(); t.state = mapers.TreeItem.State.Close; t.attributes = { Group: true }; if (e.get_isSystemGroup()) { t.iconCls = "icon-System" } else if (e.get_isSiteCollectionGroup()) { t.iconCls = "icon-siteCollection" } else { t.iconCls = "icon-mmgroup" } return t } function g(e, t) { var n = new mapers.TreeItem; n.Id = e.get_id(); n.text = e.get_name(); n.state = mapers.TreeItem.State.Close; n.attributes = { TermSet: true, GroupID: t }; n.iconCls = "icon-mmTermSet"; return n } function y(e, t, n) { var r = new mapers.TreeItem; r.Id = e.get_id(); r.text = e.get_name(); r.attributes = { Term: true, GroupID: t, TermSetID: n }; if (e.get_termsCount() > 0) { r.state = mapers.TreeItem.State.Close } r.iconCls = "icon-mmTerm"; return r } function w() { t("#termLanguageData").propertygrid({ data: [] }); t("#termMetaData").propertygrid({ data: [] }) } function E() { handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var n = new spa.Metadata; var r = o(); var i = t("#metaDataTree").tree("getSelected"); var s = t("select#slcttermlanguages option:selected").val(); var u = t("input[name='dlg-add-Labels-label']").val(); if (t.trim(u)) { n.createTermLableAsync(r, i.attributes.GroupID, i.attributes.TermSetID, i.Id, s, u, false).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.mmstermLanguageData(); handeler.removeloader("#tb-data-toolbar-loader"); t("div#dlg-add-Labels").dialog("close") }) } else { sputils.flashNotificationInfo(defs.Info_ValueCannotbeEmpty) } } function S() { handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var n = new spa.Metadata; var r = o(); var i = t("#metaDataTree").tree("getSelected"); var s = t("input[name='dlg-add-Properties-name']").val(); var u = t("input[name='dlg-add-Properties-value']").val(); var a = t("input[name='dlg-add-Properties-type']:checked").val(); if (t.trim(s) && t.trim(u)) { if (a == "true") { n.createSharedCustomPropertyByAsync(r, i.attributes.GroupID, i.attributes.TermSetID, i.Id, s, u).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.mmstermLanguageData(); handeler.removeloader("#tb-data-toolbar-loader"); t("div#dlg-add-Properties").dialog("close") }) } else { n.createLocalCustomPropertyByAsync(r, i.attributes.GroupID, i.attributes.TermSetID, i.Id, s, u).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.mmstermLanguageData(); handeler.removeloader("#tb-data-toolbar-loader"); t("div#dlg-add-Properties").dialog("close") }) } } else { sputils.flashNotificationInfo(defs.Info_ValueCannotbeEmpty) } } function x(e, t, n) { e.set_description(t.d); return e } function T(e, t, n) { return e } function N(e, n, r) { e.setDescription(n.d, r); e.set_isAvailableForTagging(n.a); t.each(n.z, function (t, n) { e.createLabel(n.v, n.c, true) }); t.each(n.y, function (t, n) { e.setCustomProperty(n.n, n.v) }); t.each(n.w, function (t, n) { e.setLocalCustomProperty(n.n, n.v) }); return e } function C(e, n, r, i) { t.each(n.t, function (t, n) { if (i && i[enums.createChildTermsOptions.NewGuid]) { n.i = SP.Guid.newGuid().toString() } var s = e.createTerm(n.x, r, n.i); s = N(s, n, r); if (n.t.length > 0) { C(s, n, r, i) } }) } var n = {}; n.contextMenuTermStoreAddGroup = function () { t.messager.prompt("Insert", "Group Name :", function (t) { if (t) { var n = new spa.Metadata; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); n.createTermGroupAsync(o(), t, SP.Guid.newGuid().toString()).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.contextMenuGroupAddTermSet = function () { t.messager.prompt("Insert", "Term Set Name :", function (n) { if (n) { var r = new spa.Metadata; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var i = t("#metaDataTree").tree("getSelected"); r.createTermSetAsync(o(), i.Id.toString(), SP.Guid.newGuid().toString(), n, a()).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.contextMenuGroupDeleteGroup = function () { t.messager.confirm("Confirm", defs.DeleteConfirmation, function (n) { if (n) { var r = new spa.Metadata; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var i = t("#metaDataTree").tree("getSelected"); r.deleteTermGroupbyIdAsync(o(), i.Id.toString()).fail(function (e) { handeler.removeloader("#tb-data-toolbar-loader"); sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.contextMenuTermSetCreateTerm = function () { t.messager.prompt("Insert", "Term Name :", function (n) { if (n) { var r = new spa.Metadata; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var i = t("#metaDataTree").tree("getSelected"); r.createTermAsync(o(), i.Id.toString(), SP.Guid.newGuid().toString(), n, a()).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.contextMenuTermSetDeleteTermSet = function () { t.messager.confirm("Confirm", defs.DeleteConfirmation, function (n) { if (n) { var r = new spa.Metadata; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var i = t("#metaDataTree").tree("getSelected"); r.deleteTermSetAsync(o(), i.Id.toString()).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.contextMenuTermCreateTerm = function () { t.messager.prompt("Insert", "Term Name :", function (n) { if (n) { var r = new spa.Metadata; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var i = t("#metaDataTree").tree("getSelected"); r.createChildTermAsync(o(), i.attributes.TermSetID, i.Id.toString(), SP.Guid.newGuid().toString(), n, a()).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.contextMenuTermDeleteTerm = function () { t.messager.confirm("Confirm", defs.DeleteConfirmation, function (n) { if (n) { var r = new spa.Metadata; var i = t("#metaDataTree").tree("getSelected"); handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); r.deleteTermByIdAsync(o(), i.attributes.GroupID, i.attributes.TermSetID, i.Id.toString()).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.loadMetadata(); handeler.removeloader("#tb-data-toolbar-loader") }) } }) }; n.saveChangestermProperties = function () { var e = t("#termMetaData").propertygrid("getChanges"); var n = o(); var r = t("#metaDataTree").tree("getSelected"); var i = new spa.Metadata; var s = t("select#slcttermlanguages").attr("defaultl"); var u = []; handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); for (var a = 0; a < e.length; a++) { switch (e[a].name) { case "Description": u.push(i.setTermDescriptionById(n, r.attributes.GroupID, r.attributes.TermSetID, r.Id, s, e[a].value)); break; case "Tagging": u.push(i.setTermTaggingById(n, r.attributes.GroupID, r.attributes.TermSetID, r.Id, e[a].value)); break; case "Name": var f = e[a].value; var l = i.setTermNameById(n, r.attributes.GroupID, r.attributes.TermSetID, r.Id, s, f); l.done(function () { var e = t("#metaDataTree").tree("getSelected"); if (e) { t("#metaDataTree").tree("update", { target: e.target, text: f }) } }); break; default: } } t.when.apply(t, u).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).done(function () { sputils.flashNotificationInfo(defs.Info_Saved) }).always(function () { handeler.removeloader("#tb-data-toolbar-loader") }) }; n.selectmmsItem = function (n) { handeler.waitUIProcess(); var r = t(n); var i = t("span#DeltaPlaceHolderPageTitleInTitleArea"); i.text(r.attr("data-name")); i.attr("data-mmsid", r.attr("data-mmsid")); i.attr("data-dl", r.attr("data-dl")); i.attr("data-l", r.attr("data-l")); e.Default.onPropertyLoad() }; n.onLoad = function () { s(); r(function () { $$.IncludeScript($$.js.spTaxonomy, function () { var e = new spa.Metadata; e.getTermStoresAsync().done(function (e) { var t = e.getEnumerator(); while (t.moveNext()) { v(t.get_current()) } }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.doneWaiting() }) }) }, function () { handeler.doneWaiting(); sputils.flashNotificationError(defs.Error_AppInitialization) }) }; n.loadMetadata = function () { $$.IncludeScript($$.js.spTaxonomy, function () { handeler.waitUIElement("div#TreeCategories"); var e = o(); var n = new spa.Metadata; n.getTermGroupsbyStoreIdAsync(e).done(function (n) { try { var r = n.getEnumerator(); var i = []; while (r.moveNext()) { var s = r.get_current(); i.push(m(s)) } var o = []; var u = new mapers.TreeItem; u.Id = e; u.text = "Managed MetaData"; u.state = mapers.TreeItem.State.Open; u.children = i; u.attributes = { Store: true }; o.push(u); t("#metaDataTree").tree({ data: o, checkbox: false, onContextMenu: function (e, n) { e.preventDefault(); t(this).tree("select", n.target); if (n.attributes.Store) { t("#metaDataTree-context-store").menu("show", { left: e.pageX, top: e.pageY }) } else if (n.attributes.Group) { t("#metaDataTree-context-group").menu("show", { left: e.pageX, top: e.pageY }) } else if (n.attributes.TermSet) { t("#metaDataTree-context-termset").menu("show", { left: e.pageX, top: e.pageY }) } else if (n.attributes.Term) { t("#metaDataTree-context-term").menu("show", { left: e.pageX, top: e.pageY }) } } }) } catch (a) { sputils.flashNotificationError(defs.Error_Reshesh) } }).fail(function (e) { t.messager.alert(defs.Msgs.Error_Title, handeler.parseSPException(e), "error") }).always(function () { i(false); w(); handeler.doneWaiting(); handeler.donewaitElement("div#TreeCategories") }) }) }; n.loadMetadataTemplete = function () { $$.IncludeScript($$.js.spTaxonomy, function () { handeler.waitUIElement("div#TemplateTree"); var e = o(); var n = new spa.Metadata; n.getTermGroupsbyStoreIdAsync(e).done(function (n) { try { var r = n.getEnumerator(); var i = []; while (r.moveNext()) { var s = r.get_current(); i.push(m(s)) } var o = []; var u = new mapers.TreeItem; u.Id = e; u.text = "Managed MetaData"; u.state = mapers.TreeItem.State.Open; u.children = i; u.attributes = { Store: true }; o.push(u); t("#templateTree").tree({ data: o, checkbox: false, onContextMenu: function (e, n) { e.preventDefault(); t(this).tree("select", n.target); if (n.attributes[mapers.TreeItem.Attributes.isTermStore]) { t("#templateTree-context-root").menu("show", { left: e.pageX, top: e.pageY }) } else { t("#templateTree-context").menu("show", { left: e.pageX, top: e.pageY }) } } }) } catch (a) { sputils.flashNotificationError(defs.Error_Reshesh) } }).fail(function (e) { t.messager.alert(defs.Msgs.Error_Title, handeler.parseSPException(e), "error") }).always(function () { handeler.doneWaiting(); handeler.donewaitElement("div#TemplateTree") }) }) }; n.loadChildData = function (e, n) { var r = new spa.Metadata; var i = o(); var s = false; if (e.children.length == 0 && e.state == mapers.TreeItem.State.Close) { e.state == mapers.TreeItem.State.Open; if (e.attributes.Group) { s = false; handeler.waitUIProcess(); r.getallTermSetsbyGroupAsync(i, e.Id).done(function (r) { var i = r.getEnumerator(); treeData = []; while (i.moveNext()) { var s = i.get_current(); treeData.push(g(s, e.Id)) } if (treeData.length == 0) { e.state == mapers.TreeItem.State.Open } t(n).tree("append", { parent: e.target, data: treeData }).tree("expandTo", e.target) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.doneWaiting() }) } else if (e.attributes.TermSet) { s = false; handeler.waitUIProcess(); r.getTermsAsync(i, e.attributes.GroupID, e.Id).done(function (r) { var i = r.getEnumerator(); treeData = []; while (i.moveNext()) { var s = i.get_current(); treeData.push(y(s, e.attributes.GroupID, e.Id)) } if (treeData.length == 0) { e.state == mapers.TreeItem.State.Open } t(n).tree("append", { parent: e.target, data: treeData }).tree("expandTo", e.target) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.doneWaiting() }) } else if (e.attributes.Term) { s = false; handeler.waitUIProcess(); r.getChildTermsAsync(i, e.attributes.GroupID, e.attributes.TermSetID, e.Id).done(function (r) { treeData = []; var i = r.getEnumerator(); while (i.moveNext()) { var s = i.get_current(); treeData.push(y(s, e.attributes.GroupID, e.attributes.TermSetID)) } if (treeData.length == 0) { e.state == mapers.TreeItem.State.Open } t(n).tree("append", { parent: e.target, data: treeData }).tree("expandTo", e.target) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.doneWaiting() }) } } else { s = true } return s }; n.onPropertyLoad = function () { var n = o(); var r = new spa.Metadata; r.getTermStoreByIdAsync(n).done(function (n) { handeler.waitUIElement("div#tbproperties"); var r = new mapers.PropertyData; r.addRow("Name", n.get_name(), "General", ""); r.addRow("Online", n.get_isOnline(), "General", ""); r.addRow("Default ", enums.Languages[n.get_defaultLanguage()], "Language", ""); r.addRow("Working", enums.Languages[n.get_workingLanguage()], "Language", ""); var s = ""; t("select#slcttermlanguages").empty(); t(n.get_languages()).each(function (e, n) { t("select#slcttermlanguages").append("<option value='" + n + "'>" + enums.Languages[n] + "</option>"); s += enums.Languages[n] + "; " }); t("select#slcttermlanguages").val(n.get_defaultLanguage()); t("select#slcttermlanguages").attr("defaultl", n.get_defaultLanguage()); r.addRow("Languages", s, "Language", ""); t("#pgMetaData").propertygrid({ data: r, showGroup: true, scrollbarSize: 0, fitColumns: false, columns: [[{ field: "name", title: "Settings", width: 80 }, { field: "value", title: "Value" }]] }); i(true); e.Default.loadMetadata(); e.Default.loadMetadataTemplete() }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.donewaitElement("div#tbproperties") }) }; n.mmsTreeNodeClick = function (n) { var r = new spa.Metadata; if (n.attributes.Term) { var i = o(); r.getTermByIdAsync(i, n.attributes.GroupID, n.attributes.TermSetID, n.Id).done(function (n) { var r = new mapers.PropertyData; var i; r.addRow("Name", n.get_name(), "General Properties (Editable)", "text"); r.addRow("Description", n.get_description(), "General Properties (Editable)", "text"); r.addRow("Tagging", n.get_isAvailableForTagging(), "General Properties (Editable)", { type: "checkbox", options: { on: true, off: false } }); i = new Date(n.get_createdDate()); r.addRow("Created", i.format("MMM dd yyyy HH:mm:ss 'GMT'zzz"), "System", ""); i = new Date(n.get_lastModifiedDate()); r.addRow("Modified", i.format("MMM dd yyyy HH:mm:ss 'GMT'zzz"), "System", ""); r.addRow("Deprecated", n.get_isDeprecated(), "System", ""); r.addRow("Keyword", n.get_isKeyword(), "System", ""); r.addRow("Pinned", n.get_isPinned(), "System", ""); r.addRow("Pinned Root", n.get_isPinnedRoot(), "System", ""); r.addRow("Reused", n.get_isReused(), "System", ""); r.addRow("Root", n.get_isRoot(), "System", ""); r.addRow("Source Term", n.get_isSourceTerm(), "System", ""); t("#termMetaData").propertygrid({ data: r, showGroup: true, showHeader: false, scrollbarSize: 0, fitColumns: true }); t("select#slcttermlanguages").val(t("select#slcttermlanguages").attr("defaultl")); e.Default.mmstermLanguageData() }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }) } else { w() } }; n.mmstermLanguageData = function () { var e = new spa.Metadata; var n = o(); var r = t("#metaDataTree").tree("getSelected"); if (r) { var i = new mapers.PropertyData; e.getTermByIdAsyncWithLabels(n, r.attributes.GroupID, r.attributes.TermSetID, r.Id, t("select#slcttermlanguages option:selected").val()).done(function (s) { var o = s.getEnumerator(); while (o.moveNext()) { var u = o.get_current(); if (u.get_isDefaultForLanguage()) { i.addRow("Synonyms & Abbreviations", u.get_value(), "Default Label", "") } else { i.addRow("Synonyms & Abbreviations", u.get_value(), "Other Labels", "") } } e.getTermSharedPropertiesByAsync(n, r.attributes.GroupID, r.attributes.TermSetID, r.Id).done(function (s) { t.each(s, function (e, t) { i.addRow(e, t, "Shared Properties", "") }); e.getTermLocalPropertiesByAsync(n, r.attributes.GroupID, r.attributes.TermSetID, r.Id).done(function (e) { t.each(e, function (e, t) { i.addRow(e, t, "Local Properties", "") }); t("#termLanguageData").propertygrid({ data: i, showGroup: true, showHeader: false, scrollbarSize: 0, fitColumns: true }) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }) } }; n.addLabels = function () { var e = t("#metaDataTree").tree("getSelected"); if (e && e.attributes.Term) { t("div#dlg-add-Labels").dialog("open") } else { sputils.flashNotificationInfo(defs.Info_SelectTerm) } }; n.addCustomProperty = function () { var e = t("#metaDataTree").tree("getSelected"); if (e && e.attributes.Term) { t("div#dlg-add-Properties").dialog("open") } else { sputils.flashNotificationInfo(defs.Info_SelectTerm) } }; n.deleteLanguageData = function () { var n = t("#termLanguageData").propertygrid("getSelected"); var r = t("#metaDataTree").tree("getSelected"); if (n && r && r.attributes.Term) { t.messager.confirm("Confirm", defs.DeleteConfirmation, function (i) { if (i) { handeler.loader("div#tb-data-toolbar-data", "loader-tb-data", "tb-data-toolbar-loader"); var s = new spa.Metadata; var u = o(); var a = t("select#slcttermlanguages option:selected").val(); switch (n.group) { case "Shared Properties": s.deleteSharedCustomPropertyByAsync(u, r.attributes.GroupID, r.attributes.TermSetID, r.Id, n.name).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.mmstermLanguageData(); handeler.removeloader("#tb-data-toolbar-loader") }); break; case "Local Properties": s.deleteLocalCustomPropertyByAsync(u, r.attributes.GroupID, r.attributes.TermSetID, r.Id, n.name).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.mmstermLanguageData(); handeler.removeloader("#tb-data-toolbar-loader") }); break; case "Other Labels": s.deletelableByAsync(u, r.attributes.GroupID, r.attributes.TermSetID, r.Id, a, n.value).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { e.Default.mmstermLanguageData(); handeler.removeloader("#tb-data-toolbar-loader") }); break; default: } } }) } else { sputils.flashNotificationInfo(defs.Info_SelectItem) } }; n.TabImportExport = function () { function r() { n = ei.getObjectData(); n.tm.v = "ex.1.0.0.0"; n.tm.dl = a(); n.tm.l = f() } function i() { setTimeout(function () { if (n.rc == n.cc) { var e = new spa.Operations; var t = e.getNewListItem(defs.L.Export.Nm); var r = B64.encode(JSON.stringify(n.tm)); t.set_item(defs.L.Export.C.ExportData, r); t.set_item(defs.L.Export.C.ExportLog, n.lg); t.set_item(defs.L.Export.C.Title, n.tm.Name); t.update(); e.insertListItem(t).done(function () { c() }).fail(function () { s(); }) } else if (n.fc > 0) { s() } else { i() } }, 2e3) } function s() { t.messager.progress("close"); t.messager.alert(defs.String.Dlg.Title_Error, defs.String.Err.OperationFailed, "error"); r() } function c() { t.messager.progress("close"); t.messager.alert(defs.String.Dlg.Title_General, defs.String.Info.ExportSaveSuccess, "info"); r(); e.loadExportGrid() } function p() { t.messager.progress("close"); t.messager.alert("Import", defs.ImportOperationSuccess, "info"); r() } function v() { t.messager.progress("close"); t.messager.alert("Import", defs.OperationFailed, "error"); r() } function m() { setTimeout(function () { if (n.rc == n.cc) { p() } else if (n.fc > 0) { v() } else { m() } }, 2e3) } function g(e) { var n = new spa.Metadata; t("div#dlg-import-terms").dialog("close"); t.messager.progress({ msg: "Do not close the browser or refresh ", text: "Import in progress" }); t.each(e.Data.g, function (r, i) { var s = n.getCreatedGroup(o(), i.i, i.x); s = x(s, e.Data.g[r], e.dl); t.each(e.Data.g[r].s, function (n, i) { var o = s.createTermSet(i.x, i.i, e.dl); o = T(o, e.Data.g[r].s[n], e.dl); t.each(i.t, function (t, i) { var s = o.createTerm(i.x, e.dl, i.i); s = N(s, e.Data.g[r].s[n].t[t], e.dl); if (i.t.length > 0) { C(s, i, e.dl) } }) }); e.cc++; spa.executeCtxAsync(s).done(function () { e.rc++ }).fail(function (t) { e.fc++; e.log(e.Data.g[r].x + ":" + t) }) }); m() } var e = {}; var n = ei.getObjectData(); e.loadTab = function () { e.loadExportGrid() }; e.loadExportGrid = function () { var e = "tb-data-toolbar-loader"; handeler.loader("div#tb-exportimport-toolbar-export", "loader-tb-data", e); spREST.Web.Lists.get(defs.L.Export.Nm, defs.L.Export.Q.getAllExports).done(function (e) { var n = []; t.each(e.d.results, function (e, t) { var r = new Date(parseInt(t[defs.L.Export.C.Created].substring(6).substring(0, 13))); n.push({ Id: t[defs.L.Export.C.Id], tmp: t[defs.L.Export.C.Title], dt: r.toGMTString() }) }); d(n) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + e) }) }; e.exportTermStore = function () { r(); n.Options.Export.TermLables = true; n.Options.Export.TermProperties = true; var e = new spa.Metadata; t.messager.prompt(defs.String.Dlg.Title_General, defs.String.Dlg.EnterName, function (r) { if (r) { n.tm.Type = mapers.Template.Type.TermStore; n.tm.Name = r; var s = new mapers.TS; s.i = o(); s.n = u(); s.dl = a(); s.l = f(); n.tm.Data = s; t.messager.progress({ msg: defs.String.Info.DoNotCloseBrowser, text: defs.String.Info.Exportinprogress }); e.getTermGroupsbyStoreIdAsync(n.tm.Data.i).done(function (e) { var t = e.getEnumerator(); while (t.moveNext()) { var r = t.get_current(); var s = ei.mapGroupObject(r); n.tm.Data.g.push(s) } ei.exportGetTermSetsandTerms(n); i() }).fail(function () { n.fc++; i() }) } }) }; e.clickExportGrid = function (e, n) { t("ul#exportTreePreview").empty(); var r = "tb-data-toolbar-loader"; handeler.loader("div#tb-exportimport-toolbar-export", "loader-tb-data", r); spREST.Web.Lists.get(defs.L.Export.Nm, defs.L.Export.Q.getExportById(n.Id)).done(function (e) { var t = JSON.parse(B64.decode(e.d.results[0][defs.L.Export.C.ExportData])); h("ul#exportTreePreview", t.Data) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + r) }) }; e.openImportDialog = function () { var e = new spa.Operations; var n = t("#exportGrid").datagrid("getSelected"); if (n) { var r = "tb-data-toolbar-loader"; handeler.loader("div#tb-exportimport-toolbar-export", "loader-tb-data", r); spREST.Web.Lists.get(defs.L.Export.Nm, defs.L.Export.Q.getExportById(n.Id)).done(function (e) { var n = JSON.parse(B64.decode(e.d.results[0][defs.L.Export.C.ExportData])); var r = []; n.Data.g.forEach(function (e) { var t = l(e); t.attributes[mapers.TreeItem.Attributes.isGroup] = true; r.push(t) }); var i = []; var s = new mapers.TreeItem; s.Id = n.Data.i; s.text = "Import : " + n.Name; s.state = mapers.TreeItem.State.Close; s.children = r; i.push(s); t("ul#ImporttermaDataTree").tree({ data: i, checkbox: true }); t("div#dlg-import-terms").dialog("open") }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + r) }) } else { t.messager.alert("Import", defs.ImportPleaseSelect, "info") } }; e.importExportedData = function () { var e = t("input[name='dlg-import-terms-options']:checked").val(); var n = t("ul#ImporttermaDataTree").tree("getChecked"); if (n) { var i = new spa.Metadata; i.getTermGroupsbyStoreIdAsync(o()).done(function (i) { var s = i.getEnumerator(); var o = true; var u = []; while (s.moveNext()) { var a = s.get_current(); u.push(a.get_id().toString()) } r(); var f = "tb-data-toolbar-loader"; handeler.loader("div#tb-exportimport-toolbar-export", "loader-tb-data", f); var l = t("#exportGrid").datagrid("getSelected"); spREST.Web.Lists.get(defs.L.Export.Nm, defs.L.Export.Q.getExportById(l.Id)).done(function (r) { var i = JSON.parse(B64.decode(r.d.results[0][defs.L.Export.C.ExportData])); switch (e) { case "1": break; case "2": var s = n.some(function (e, t, n) { return u.some(function (t, n, r) { return t == e.Id }) }); if (s) { t("div#dlg-import-terms").dialog("close"); t.messager.alert("Import", "One or more Groups exist in the selected term store. Import canceled", "warning") } else { i.Data.g = i.Data.g.filter(function (e) { return n.some(function (t, n, r) { return t.Id == e.i }) }); g(e, i) } break; case "3": var o = []; t.each(n, function (e, t) { if (t.attributes.Group) { var n = !u.some(function (e, n, r) { return e == t.Id }); if (n) { o.push(t.Id) } } }); i.Data.g = i.Data.g.filter(function (e) { return o.some(function (t, n, r) { return t == e.i }) }); g(i); break; default: break } }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + f) }) }).fail(function (e) { t("div#dlg-import-terms").dialog("close"); sputils.flashNotificationError(handeler.parseSPException(e)) }) } }; return e }(); n.TabTemplate = function () { function i() { r = ei.getObjectData(); r.tm.v = "tm.1.0.0.0"; r.tm.dl = a(); r.tm.l = f(); r.Options.Export.TermLables = true; r.Options.Export.TermProperties = true } function s() { setTimeout(function () { if (r.rc == r.cc) { var e = new spa.Operations; var t = e.getNewListItem(defs.L.Templates.Nm); var n = B64.encode(JSON.stringify(r.tm)); t.set_item(defs.L.Templates.C.TemplateType, r.tm.Type); t.set_item(defs.L.Templates.C.TemplateData, n); t.set_item(defs.L.Templates.C.TemplateLog, r.lg); t.set_item(defs.L.Templates.C.Title, r.tm.Name); t.update(); e.insertListItem(t).done(function () { l() }).fail(function () { u(); }) } else if (r.fc > 0) { u() } else { s() } }, 2e3) } function u() { t.messager.progress("close"); t.messager.alert(defs.String.Dlg.Title_Error, defs.OperationFailed, "error"); i() } function l() { t.messager.progress("close"); t.messager.alert(defs.String.Dlg.Title_General, defs.String.Info.TemplateSaveSuccess, "info"); i(); n.LoadTemplates() } function p(e, n) { var i = new spa.Metadata; t.messager.prompt(defs.String.Dlg.Title_General, defs.String.Dlg.EnterTemplateName, function (s) { if (s) { r.tm.Type = mapers.Template.Type.TermStore; r.tm.Name = s; var u = new mapers.TS; u.i = o(); u.n = e.text; u.dl = a(); u.l = f(); r.tm.Data = u; t.messager.progress({ msg: defs.String.Info.DoNotCloseBrowser, text: defs.String.Info.Exportinprogress }); i.getTermGroupsbyStoreIdAsync(r.tm.Data.i).done(function (e) { var t = e.getEnumerator(); while (t.moveNext()) { var i = t.get_current(); var s = ei.mapGroupObject(i); r.tm.Data.g.push(s) } ei.exportGetTermSetsandTerms(r); n() }).fail(function () { r.fc++; n() }) } }) } function d(e, n) { var i = new spa.Metadata; t.messager.prompt(defs.String.Dlg.Title_General, defs.String.Dlg.EnterTemplateName, function (s) { if (s) { var u = new mapers.TS; u.i = o(); u.n = ""; u.dl = a(); u.l = f(); var l = new mapers.G; l.i = e.Id.toString(); l.x = e.text; u.g.push(l); r.tm.Type = mapers.Template.Type.Group; r.tm.Name = s; r.tm.Data = u; t.messager.progress({ msg: defs.String.Info.DoNotCloseBrowser, text: defs.String.Info.Exportinprogress }); i.getTermGroupbyIdAsync(r.tm.Data.i, r.tm.Data.g[0].i).done(function (e) { r.tm.Data.g[0] = ei.mapGroupObject(e); ei.exportGetTermSetsandTerms(r); n() }).fail(function () { r.fc++; n() }) } }) } function v(e, n) { var i = new spa.Metadata; t.messager.prompt(defs.String.Dlg.Title_General, defs.String.Dlg.EnterTemplateName, function (i) { if (i) { var s = new mapers.TS; s.i = o(); s.n = ""; s.dl = a(); s.l = f(); var u = new mapers.G; u.i = e.attributes[mapers.TreeItem.Attributes.GroupID].toString(); u.x = ""; var l = new mapers.S; l.i = e.Id.toString(); l.x = e.text; u.s.push(l); s.g.push(u); r.tm.Type = mapers.Template.Type.TermSet; r.tm.Name = i; r.tm.Data = s; t.messager.progress({ msg: defs.String.Info.DoNotCloseBrowser, text: defs.String.Info.Exportinprogress }); ei.exportGetTermsForTermSet(r.tm.Data.g[0], r.tm.Data.g[0].s[0], r); n() } }) } function m(e, n) { var i = new spa.Metadata; t.messager.prompt(defs.String.Dlg.Title_General, defs.String.Dlg.EnterTemplateName, function (i) { if (i) { var s = new mapers.TS; s.i = o(); s.n = ""; s.dl = a(); s.l = f(); var u = new mapers.G; u.i = e.attributes[mapers.TreeItem.Attributes.GroupID].toString(); u.x = ""; var l = new mapers.S; l.i = e.attributes[mapers.TreeItem.Attributes.TermSetID].toString(); l.x = ""; var c = new mapers.T; c.i = e.Id.toString(); c.x = e.text; l.t.push(c); u.s.push(l); s.g.push(u); r.tm.Type = mapers.Template.Type.Term; r.tm.Name = i; r.tm.Data = s; t.messager.progress({ msg: defs.String.Info.DoNotCloseBrowser, text: defs.String.Info.Exportinprogress }); ei.exportGetChildTerms(r.tm.Data.g[0].s[0].t[0], r.tm.Data.g[0], r.tm.Data.g[0].s[0], r); n() } }) } function g() { t("div#dlg-apply-Templates").dialog("open") } function y(e) { node = t("#templateTree").tree("getSelected"); var n = "tb-data-toolbar-loader"; handeler.loader("div#tb-templates-toolbar", "loader-tb-data", n); var r = ""; if (e) { r = mapers.Template.Type.TermStore } else { if (node.attributes[mapers.TreeItem.Attributes.isTermStore]) { r = mapers.Template.Type.Group } else if (node.attributes[mapers.TreeItem.Attributes.isGroup]) { r = mapers.Template.Type.TermSet } else if (node.attributes[mapers.TreeItem.Attributes.isTermSet]) { r = mapers.Template.Type.Term } else if (node.attributes[mapers.TreeItem.Attributes.isTerm]) { r = mapers.Template.Type.Term } } spREST.Web.Lists.get(defs.L.Templates.Nm, defs.L.Templates.Q.getTemplatesForType(r)).done(function (e) { t("select#templatesToAplly").empty(); t.each(e.d.results, function (e, n) { t("select#templatesToAplly").append("<option value='" + n[defs.L.Templates.C.Id] + "'>" + n[defs.L.Templates.C.Title] + "</option>") }); g() }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + n) }) } var n = {}; var r = ei.getObjectData(); n.ExportAsTemplate = function () { i(); node = t("#templateTree").tree("getSelected"); if (!node) { t.messager.alert(defs.String.Dlg.Title_General, defs.Info_SelectItem, "info"); return } if (node.attributes[mapers.TreeItem.Attributes.isTermStore]) { p(node, s) } else if (node.attributes[mapers.TreeItem.Attributes.isGroup]) { d(node, s) } else if (node.attributes[mapers.TreeItem.Attributes.isTermSet]) { v(node, s) } else if (node.attributes[mapers.TreeItem.Attributes.isTerm]) { m(node, s) } }; n.LoadTemplates = function () { var e = "tb-data-toolbar-loader"; handeler.loader("div#tb-templates-toolbar", "loader-tb-data", e); spREST.Web.Lists.get(defs.L.Templates.Nm, defs.L.Templates.Q.getAllTemplates).done(function (e) { var n = []; t.each(e.d.results, function (e, t) { n.push({ Id: t[defs.L.Templates.C.Id], tmp: t[defs.L.Templates.C.Title], typ: t[defs.L.Templates.C.TemplateType] }) }); c(n) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + e) }) }; n.clickTemplateGrid = function (e, n) { t("ul#templateTreePreview").empty(); var r = "tb-data-toolbar-loader"; handeler.loader("div#tb-templates-toolbar", "loader-tb-data", r); spREST.Web.Lists.get(defs.L.Templates.Nm, defs.L.Templates.Q.getTemplateById(n.Id)).done(function (e) { var t = JSON.parse(B64.decode(e.d.results[0][defs.L.Templates.C.TemplateData])); h("ul#templateTreePreview", t.Data) }).fail(function (e) { sputils.flashNotificationError(handeler.parseSPException(e)) }).always(function () { handeler.removeloader("#" + r) }) }; n.loadDlgApply = function () { y(false) }; n.applyTemplate = function () { if (t("#from-apply-Templates").form("validate")) { var n = t("select#templatesToAplly").val(); t("div#dlg-apply-Templates").dialog("close"); t.messager.progress({ msg: "Do not close the browser or refresh ", text: "Import in progress" }); spREST.Web.Lists.get(defs.L.Templates.Nm, defs.L.Templates.Q.getTemplateById(n)).done(function (n) { var r = t("#templateTree").tree("getSelected"); var i = new mapers.Template; i = JSON.parse(B64.decode(n.d.results[0][defs.L.Templates.C.TemplateData])); var s = new spa.Metadata; var u = o(); var a; switch (i.Type) { case mapers.Template.Type.Group: var f = s.getCreatedGroup(u, SP.Guid.newGuid().toString(), i.Data.g[0].x); f = x(f, i.Data.g[0], i.dl); t.each(i.Data.g[0].s, function (e, n) { var r = f.createTermSet(n.x, SP.Guid.newGuid().toString(), i.dl); r = T(r, i.Data.g[0].s[e], i.dl); t.each(n.t, function (t, n) { var s = r.createTerm(n.x, i.dl, SP.Guid.newGuid().toString()); s = N(s, i.Data.g[0].s[e].t[t], i.dl); if (n.t.length > 0) { var o = {}; o[enums.createChildTermsOptions.NewGuid] = true; C(s, n, i.dl, o) } }) }); a = f; break; case mapers.Template.Type.TermSet: var l = s.getCreatedTermSet(u, r.Id.toString(), SP.Guid.newGuid().toString(), i.Data.g[0].s[0].x, i.dl); l = T(l, i.Data.g[0].s[0], i.dl); t.each(i.Data.g[0].s[0].t, function (e, t) { var n = l.createTerm(t.x, i.dl, SP.Guid.newGuid().toString()); n = N(n, i.Data.g[0].s[0].t[e], i.dl); if (t.t.length > 0) { var r = {}; r[enums.createChildTermsOptions.NewGuid] = true; C(n, i.Data.g[0].s[0].t[e], i.dl, r) } }); a = l; break; case mapers.Template.Type.Term: var c; if (r.attributes[mapers.TreeItem.Attributes.isTermSet]) { c = s.getCreatedTerm(u, r.Id.toString(), SP.Guid.newGuid().toString(), i.Data.g[0].s[0].t[0].x, i.dl) } else { var h = r.attributes[mapers.TreeItem.Attributes.TermSetID].toString(); c = s.getCreatedChildTerm(u, h, r.Id.toString(), SP.Guid.newGuid().toString(), i.Data.g[0].s[0].t[0].x, i.dl) } c = N(c, i.Data.g[0].s[0].t[0], i.dl); t.each(i.Data.g[0].s[0].t[0].t, function (e, t) { var n = c.createTerm(t.x, i.dl, SP.Guid.newGuid().toString()); n = N(n, i.Data.g[0].s[0].t[0].t[e], i.dl); if (t.t.length > 0) { var r = {}; r[enums.createChildTermsOptions.NewGuid] = true; C(n, i.Data.g[0].s[0].t[0].t[e], i.dl, r) } }); a = c; break } spa.executeCtxAsync(a).done(function () { t.messager.alert("Import", defs.ImportOperationSuccess, "info"); e.Default.loadMetadataTemplete() }).fail(function (e) { t.messager.alert(defs.String.Dlg.Title_Error, handeler.parseSPException(e), "error") }).always(function () { t.messager.progress("close") }) }).fail(function (e) { t.messager.alert(defs.String.Dlg.Title_Error, handeler.parseSPException(b), "error") }).always(function () { t.messager.progress("close") }) } }; n.loadTab = function () { t("ul#templateTreePreview").empty(); n.LoadTemplates(); e.Default.loadMetadataTemplete() }; return n }(); return n }() })(window.app = window.app || {}, jQuery)