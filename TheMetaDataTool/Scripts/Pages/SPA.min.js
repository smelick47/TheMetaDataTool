(function (e, t, n) { function i() { var e = t.Deferred(); var n = new SP.ClientContext.get_current; var i = n.get_web(); n.load(i); var s = i.get_allProperties(); n.load(s); s.set_item("SPHostUrl", decodeURI(utils.getQueryStringParameter(r.paramSPHostUrl))); s.set_item("SPAppWebUrl", decodeURI(utils.getQueryStringParameter(r.paramSPHostUrl))); i.update(); _sa.configs.SPHostUrl = s.get_item("SPHostUrl"); _sa.configs.SPWebtUrl = s.get_item("SPAppWebUrl"); n.executeQueryAsync(function () { e.resolve() }, function (t, n) { e.reject(n.get_message) }); return e.promise() } function s() { var e = t.Deferred(); var n = new SP.ClientContext.get_current; var r = n.get_web(); n.load(r); var i = r.get_allProperties(); n.load(i); n.executeQueryAsync(function () { try { _sa.configs.SPHostUrl = i.get_item("SPHostUrl"); _sa.configs.SPWebtUrl = i.get_item("SPAppWebUrl"); e.resolve() } catch (t) { e.reject(t.message) } }, function (t, n) { e.reject(n.get_message) }); return e.promise() } function o() { _sa.configs.SPHostUrl = decodeURIComponent(utils.getQueryStringParameter(r.paramSPHostUrl)); _sa.configs.SPWebtUrl = scriptbase.getAppWebUrlUrl(); _sa.ctx = new SP.ClientContext.get_current; _sa.web = _sa.ctx.get_web() } window._sa = e; _sa.ctx = null; _sa.web = null; _sa.configs = { SPHostUrl: "", SPWebtUrl: "" }; var r = { paramSPHostUrl: "SPHostUrl", paramSPWebtUrl: "SPAppWebUrl" }; o(); utils.log(_sa.configs.SPHostUrl); utils.log(_sa.configs.SPWebtUrl); _sa.executeCtxAsync = function (e) { var n = t.Deferred(); if (e) { _sa.ctx.load(e) } _sa.ctx.executeQueryAsync(function () { if (e) { n.resolve(e) } else { n.resolve() } }, function (e, t) { n.reject(t) }); return n.promise() }; _sa.Operations = function () { }; _sa.Operations.prototype = { getListItemByIdAsync: function (e, n) { var r = t.Deferred(); var i = _sa.web.get_lists().getByTitle(e); var s = i.getItemById(n); _sa.ctx.load(s); _sa.ctx.executeQueryAsync(function () { r.resolve(s) }, function (e, t) { r.reject(t) }); return r.promise() }, getListItemsByCAMLAsync: function (e, n, r) { var i = t.Deferred(); var s = _sa.web.get_lists().getByTitle(e); var o = new SP.CamlQuery; o.set_viewXml(n); var u = s.getItems(o); _sa.ctx.load(u, r); _sa.ctx.executeQueryAsync(function () { i.resolve(u) }, function (e, t) { i.reject(t) }); return i.promise() }, getNewListItem: function (e) { var t = _sa.web.get_lists().getByTitle(e); var n = new SP.ListItemCreationInformation; return t.addItem(n) }, getListItem: function (e, t) { var n = _sa.web.get_lists().getByTitle(e); return n.getItemById(t) }, insertListItem: function (e) { var n = t.Deferred(); _sa.ctx.executeQueryAsync(function () { n.resolve(e) }, function (e, t) { n.reject(t) }); return n.promise() }, updateListColumnByIdAsync: function (e, n, r, i) { var s = t.Deferred(); var o = _sa.web.get_lists().getByTitle(e); var u = o.getItemById(n); u.set_item(r, i); u.update(); _sa.ctx.executeQueryAsync(function () { s.resolve(u) }, function (e, t) { s.reject(t) }); return s.promise() }, deleteListItemByIdAsync: function (e, n) { var r = t.Deferred(); var i = _sa.web.get_lists().getByTitle(e); i.getItemById(n).deleteObject(); _sa.ctx.executeQueryAsync(function () { r.resolve() }, function (e, t) { r.reject(t) }); return r.promise() }, createFileinDocumentLibraryAsync: function (e, n, r) { var i = t.Deferred(); var s = _sa.web.get_lists().getByTitle(e); var o = new SP.FileCreationInformation; o.set_url(n); var u = new SP.Base64EncodedByteArray; for (var a = 0; a < r.length; a++) { u.append(r.charCodeAt(a)) } o.set_content(u); var f = s.get_rootFolder().get_files().add(o); _sa.ctx.load(f); _sa.ctx.executeQueryAsync(function () { i.resolve(f) }, function (e, t) { i.reject(t) }); return i.promise() }, getFileDatainDocumentLibraryAsync: function (e, n) { var r = t.Deferred(); var i = new SP.ClientContext.get_current; var s = i.get_web(); i.load(s); i.executeQueryAsync(function () { fileUrl = s.get_serverRelativeUrl() + "/Lists/" + e + "/" + n; t.ajax({ url: fileUrl, type: "GET" }).done(function (e) { r.resolve(e) }).error(function () { r.reject(false) }) }), function (e, t) { r.reject(t) }; return r.promise() } }; _sa.Permisions = function () { }; _sa.Permisions.prototype = { doesUserHaveManagewebAsync: function () { var e = t.Deferred(); var n = new SP.BasePermissions; n.set(SP.PermissionKind.manageWeb); var r = _sa.web.doesUserHavePermissions(n); _sa.ctx.executeQueryAsync(function () { if (r.get_value()) { e.resolve() } else { e.reject() } }, function (t, n) { e.reject(n) }); return e.promise() } }; _sa.Metadata = function () { }; _sa.Metadata.prototype = { getTermStoresAsync: function () { var e = t.Deferred(); var n = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var r = n.get_termStores(); _sa.ctx.load(r); _sa.ctx.executeQueryAsync(function () { e.resolve(r) }, function (t, n) { e.reject(n) }); return e.promise() }, getTermStoreByIdAsync: function (e) { var n = t.Deferred(); var r = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var i = r.get_termStores().getById(e); _sa.ctx.load(i); _sa.ctx.executeQueryAsync(function () { n.resolve(i) }, function (e, t) { n.reject(t) }); return n.promise() }, getTermGroupsbyStoreIdAsync: function (e) { var n = t.Deferred(); var r = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var i = r.get_termStores().getById(e).get_groups(); _sa.ctx.load(i); _sa.ctx.executeQueryAsync(function () { n.resolve(i) }, function (e, t) { n.reject(t) }); return n.promise() }, getTermGroupbyIdAsync: function (e, n) { var r = t.Deferred(); var i = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var s = i.get_termStores().getById(e).get_groups().getById(n); _sa.ctx.load(s); _sa.ctx.executeQueryAsync(function () { r.resolve(s) }, function (e, t) { r.reject(t) }); return r.promise() }, deleteTermGroupbyIdAsync: function (e, n) { var r = t.Deferred(); var i = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var s = i.get_termStores().getById(e).get_groups().getById(n); s.deleteObject(); _sa.ctx.executeQueryAsync(function () { r.resolve(true) }, function (e, t) { r.reject(t) }); return r.promise() }, createTermGroupAsync: function (e, n, r) { var i = t.Deferred(); var s = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var o = s.get_termStores().getById(e); var u = o.createGroup(n, r); _sa.ctx.load(u); _sa.ctx.executeQueryAsync(function () { i.resolve() }, function (e, t) { i.reject(t) }); return i.promise() }, getTermSetbyIdAsync: function (e, n, r) { var i = t.Deferred(); var s = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var o = s.get_termStores().getById(e).get_groups().getById(n); var u = o.get_termSets().getById(r); _sa.ctx.load(u); _sa.ctx.executeQueryAsync(function () { i.resolve(u) }, function (e, t) { i.reject(t) }); return i.promise() }, getallTermSetsbyGroupAsync: function (e, n) { var r = t.Deferred(); var i = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var s = i.get_termStores().getById(e).get_groups().getById(n); var o = s.get_termSets(); _sa.ctx.load(o); _sa.ctx.executeQueryAsync(function () { r.resolve(o) }, function (e, t) { r.reject(t) }); return r.promise() }, deleteTermSetAsync: function (e, n) { var r = t.Deferred(); var i = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var s = i.get_termStores().getById(e); var o = s.getTermSet(n); o.deleteObject(); _sa.ctx.executeQueryAsync(function () { r.resolve() }, function (e, t) { r.reject(t) }); return r.promise() }, getCreatedChildTerm: function (e, t, n, r, i, s) { var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).getTermSet(t).getTerm(n); return u.createTerm(i, s, r) }, getCreatedTerm: function (e, t, n, r, i) { var s = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); return s.get_termStores().getById(e).getTermSet(t).createTerm(r, i, n) }, getCreatedTermSet: function (e, t, n, r, i) { var s = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var o = s.get_termStores().getById(e).get_groups().getById(t); return o.createTermSet(r, n, i) }, getCreatedGroup: function (e, t, n) { var r = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); return r.get_termStores().getById(e).createGroup(n, t) }, createTermSetWithChildsAsync: function (e) { var n = t.Deferred(); _sa.ctx.load(e); _sa.ctx.executeQueryAsync(function () { n.resolve(e) }, function (e, t) { n.reject(t) }); return n.promise() }, createTermSetAsync: function (e, n, r, i, s) { var o = t.Deferred(); var u = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var a = u.get_termStores().getById(e).get_groups().getById(n); var f = a.createTermSet(i, r, s); _sa.ctx.load(f); _sa.ctx.executeQueryAsync(function () { o.resolve(f) }, function (e, t) { o.reject(t) }); return o.promise() }, createGroupWithChildsAsync: function (e) { var n = t.Deferred(); _sa.ctx.load(e); _sa.ctx.executeQueryAsync(function () { n.resolve(e) }, function (e, t) { n.reject(t) }); return n.promise() }, getallTermsAsync: function (e, n, r) { var i = t.Deferred(); var s = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var o = s.get_termStores().getById(e).get_groups().getById(n); var u = o.get_termSets().getById(r).getAllTerms(); _sa.ctx.load(u); _sa.ctx.executeQueryAsync(function () { i.resolve(u) }, function (e, t) { i.reject(t) }); return i.promise() }, getTermsAsync: function (e, n, r) { var i = t.Deferred(); var s = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var o = s.get_termStores().getById(e).get_groups().getById(n); var u = o.get_termSets().getById(r).get_terms(); _sa.ctx.load(u); _sa.ctx.executeQueryAsync(function () { i.resolve(u) }, function (e, t) { i.reject(t) }); return i.promise() }, getTermByIdAsync: function (e, n, r, i) { var s = t.Deferred(); var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).get_groups().getById(n); var a = u.get_termSets().getById(r).getTerm(i); _sa.ctx.load(a); _sa.ctx.executeQueryAsync(function () { s.resolve(a) }, function (e, t) { s.reject(t) }); return s.promise() }, getTermByIdAsyncWithLabels: function (e, n, r, i, s) { var o = t.Deferred(); var u = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var a = u.get_termStores().getById(e).get_groups().getById(n); var f = a.get_termSets().getById(r).getTerm(i); var l = f.getAllLabels(s); _sa.ctx.load(l); _sa.ctx.executeQueryAsync(function () { o.resolve(l) }, function (e, t) { o.reject(t) }); return o.promise() }, getChildTermsAsync: function (e, n, r, i) { var s = t.Deferred(); var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).get_groups().getById(n); var a = u.get_termSets().getById(r).getTerm(i).get_terms(); _sa.ctx.load(a); _sa.ctx.executeQueryAsync(function () { s.resolve(a) }, function (e, t) { s.reject(t) }); return s.promise() }, setTermDescriptionById: function (e, n, r, i, s, o) { var u = t.Deferred(); var a = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var f = a.get_termStores().getById(e).get_groups().getById(n); var l = f.get_termSets().getById(r).getTerm(i); l.setDescription(o, s); _sa.ctx.load(l); _sa.ctx.executeQueryAsync(function () { u.resolve(l) }, function (e, t) { u.reject(t) }); return u.promise() }, setTermNameById: function (e, n, r, i, s, o) { var u = t.Deferred(); var a = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var f = a.get_termStores().getById(e).get_groups().getById(n); var l = f.get_termSets().getById(r).getTerm(i); l.set_name(o, s); _sa.ctx.load(l); _sa.ctx.executeQueryAsync(function () { u.resolve(l) }, function (e, t) { u.reject(t) }); return u.promise() }, setTermTaggingById: function (e, n, r, i, s) { var o = t.Deferred(); var u = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var a = u.get_termStores().getById(e).get_groups().getById(n); var f = a.get_termSets().getById(r).getTerm(i); f.set_isAvailableForTagging(s); _sa.ctx.load(f); _sa.ctx.executeQueryAsync(function () { o.resolve(f) }, function (e, t) { o.reject(t) }); return o.promise() }, createTermAsync: function (e, n, r, i, s) { var o = t.Deferred(); var u = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var a = u.get_termStores().getById(e).getTermSet(n); var f = a.createTerm(i, s, r); _sa.ctx.load(f); _sa.ctx.executeQueryAsync(function () { o.resolve(f) }, function (e, t) { o.reject(t) }); return o.promise() }, deleteTermByIdAsync: function (e, n, r, i) { var s = t.Deferred(); var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).get_groups().getById(n); var a = u.get_termSets().getById(r).getTerm(i); a.deleteObject(); _sa.ctx.executeQueryAsync(function () { s.resolve(true) }, function (e, t) { s.reject(t) }); return s.promise() }, createChildTermAsync: function (e, n, r, i, s, o) { var u = t.Deferred(); var a = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var f = a.get_termStores().getById(e).getTermSet(n).getTerm(r); var l = f.createTerm(s, o, i); _sa.ctx.load(l); _sa.ctx.executeQueryAsync(function () { u.resolve(l) }, function (e, t) { u.reject(t) }); return u.promise() }, createTermLableAsync: function (e, n, r, i, s, o, u) { var a = t.Deferred(); var f = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var l = f.get_termStores().getById(e).get_groups().getById(n); var c = l.get_termSets().getById(r).getTerm(i); if (u) { u = false } c.createLabel(o, s, u); _sa.ctx.load(c); _sa.ctx.executeQueryAsync(function () { a.resolve(c) }, function (e, t) { a.reject(t) }); return a.promise() }, deletelableByAsync: function (e, n, r, i, s, o) { var u = t.Deferred(); var a = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var f = a.get_termStores().getById(e).get_groups().getById(n); var l = f.get_termSets().getById(r).getTerm(i).getAllLabels(s).getByValue(o); l.deleteObject(); _sa.ctx.load(l); _sa.ctx.executeQueryAsync(function () { u.resolve(true) }, function (e, t) { u.reject(t) }); return u.promise() }, getTermSharedPropertiesByAsync: function (e, n, r, i) { var s = t.Deferred(); var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).get_groups().getById(n); var a = u.get_termSets().getById(r).getTerm(i); _sa.ctx.load(a, "CustomProperties"); _sa.ctx.executeQueryAsync(function () { s.resolve(a.get_customProperties()) }, function (e, t) { s.reject(t) }); return s.promise() }, createSharedCustomPropertyByAsync: function (e, n, r, i, s, o) { var u = t.Deferred(); var a = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var f = a.get_termStores().getById(e).get_groups().getById(n); f.get_termSets().getById(r).getTerm(i).setCustomProperty(s, o); _sa.ctx.executeQueryAsync(function () { u.resolve(true) }, function (e, t) { u.reject(t) }); return u.promise() }, deleteSharedCustomPropertyByAsync: function (e, n, r, i, s) { var o = t.Deferred(); var u = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var a = u.get_termStores().getById(e).get_groups().getById(n); a.get_termSets().getById(r).getTerm(i).deleteCustomProperty(s); _sa.ctx.executeQueryAsync(function () { o.resolve(true) }, function (e, t) { o.reject(t) }); return o.promise() }, getTermLocalPropertiesByAsync: function (e, n, r, i) { var s = t.Deferred(); var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).get_groups().getById(n); var a = u.get_termSets().getById(r).getTerm(i); _sa.ctx.load(a, "LocalCustomProperties"); _sa.ctx.executeQueryAsync(function () { s.resolve(a.get_localCustomProperties()) }, function (e, t) { s.reject(t) }); return s.promise() }, getTermLocalSharedPropertiesByTermIdAsync: function (e, n, r, i) { var s = t.Deferred(); var o = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var u = o.get_termStores().getById(e).get_groups().getById(n); var a = u.get_termSets().getById(r).getTerm(i); _sa.ctx.load(a, "LocalCustomProperties", "CustomProperties"); _sa.ctx.executeQueryAsync(function () { s.resolve(a.get_localCustomProperties(), a.get_customProperties()) }, function (e, t) { s.reject(t) }); return s.promise() }, createLocalCustomPropertyByAsync: function (e, n, r, i, s, o) { var u = t.Deferred(); var a = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var f = a.get_termStores().getById(e).get_groups().getById(n); f.get_termSets().getById(r).getTerm(i).setLocalCustomProperty(s, o); _sa.ctx.executeQueryAsync(function () { u.resolve(true) }, function (e, t) { u.reject(t) }); return u.promise() }, deleteLocalCustomPropertyByAsync: function (e, n, r, i, s) { var o = t.Deferred(); var u = SP.Taxonomy.TaxonomySession.getTaxonomySession(_sa.ctx); var a = u.get_termStores().getById(e).get_groups().getById(n); a.get_termSets().getById(r).getTerm(i).deleteLocalCustomProperty(s); _sa.ctx.executeQueryAsync(function () { o.resolve(true) }, function (e, t) { o.reject(t) }); return o.promise() } } })(window.spa = window.spa || {}, jQuery); (function (e, t, n) { e.flashNotificationWarninig = function (e) { var t = SP.UI.Status.addStatus("Warning :", e); SP.UI.Status.setStatusPriColor(t, "yellow"); setTimeout(function () { SP.UI.Status.removeStatus(t) }, 3e3) }; e.flashNotificationInfo = function (e) { var t = SP.UI.Status.addStatus("Info: ", e); SP.UI.Status.setStatusPriColor(t, "blue"); setTimeout(function () { SP.UI.Status.removeStatus(t) }, 3e3) }; e.flashNotificationError = function (e) { var t = SP.UI.Status.addStatus("Error :", e); SP.UI.Status.setStatusPriColor(t, "red"); setTimeout(function () { SP.UI.Status.removeStatus(t) }, 3e3) }; e.SPModalDialog = function (e, t, n, r, i) { var s = { url: $$.getAppWebUrlUrl() + e, autoSize: true, allowMaximize: true, showClose: true, title: t, dialogReturnValueCallback: function (e) { if (n) { n(e) } } }; if (r) { s.width = r } if (i) { s.height = i } SP.UI.ModalDialog.showModalDialog(s) }; e.initializePeoplePicker = function (e) { var t = {}; t["PrincipalAccountType"] = "User,DL,SecGroup,SPGroup"; t["SearchPrincipalSource"] = 15; t["ResolvePrincipalSource"] = 15; t["AllowMultipleValues"] = true; t["MaximumEntitySuggestions"] = 50; t["Width"] = "280px"; SPClientPeoplePicker_InitStandaloneControlWrapper(e, null, t) }; e.setPeoplePickerValues = function (e, n) { if (n) { var r = SPClientPeoplePicker.SPClientPeoplePickerDict[e + "_TopSpan"]; var i = "#" + e + "_TopSpan_EditorInput"; t.each(n, function (e, n) { t(i).val(n.get_lookupValue()); r.AddUnresolvedUserFromEditor(true) }) } }; e.PeoplePickerClear = function (e) { var n = "#" + e + "_TopSpan_ResolvedList"; t(n).empty() }; e.setPeoplePickerEnable = function (e, t) { var n = SPClientPeoplePicker.SPClientPeoplePickerDict[e + "_TopSpan"]; n.SetEnabledState(t) } })(window.sputils = window.sputils || {}, jQuery); (function (e, t, n) { function r(e) { return "SP.Data." + e[0].toUpperCase() + e.substring(1) + "ListItem" } e.Web = e.Web || {}; e.Web.RegionalSettings = e.Web.RegionalSettings || {}; e.Web.RegionalSettings.TimeZone = function () { var e = t.Deferred(); t.ajax({ url: $$.getAppWebUrlUrl() + "/_api/web/RegionalSettings/timeZone", dataType: "xml", success: function (t) { e.resolve(t) }, error: function (t) { e.reject(t.statusText) } }); return e.promise() }; e.Web.Lists = e.Web.Lists || {}; e.Web.Lists.add = function (e, n) { var i = t.Deferred(); var s = t.extend({ __metadata: { type: r(e) } }, n); t.ajax({ url: $$.getAppWebUrlUrl() + "/_api/web/lists/getbytitle('" + e + "')/items", type: "POST", contentType: "application/json;odata=verbose", data: JSON.stringify(s), headers: { Accept: "application/json;odata=verbose", "X-RequestDigest": t("#__REQUESTDIGEST").val() }, success: function (e) { i.resolve(e) }, error: function (e) { i.reject(e.statusText) } }); return i.promise() }; e.Web.Lists.get = function (e, n) { var r = t.Deferred(); var i = $$.getAppWebUrlUrl() + "/_vti_bin/listdata.svc/" + e; if (n) { i += n } t.ajax({ dataType: "json", url: i, success: function (e) { r.resolve(e) }, error: function (e) { r.reject(e.statusText) } }); return r.promise() } })(window.spREST = window.spREST || {}, jQuery)